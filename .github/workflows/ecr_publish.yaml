name: Update app workflow

on:
  push:
    branches:
      - main
    # paths:
    # - "api/**"
  pull_request:
    branches:
      - main
    paths:
      - "api/**"
  workflow_dispatch:


jobs:
  ecr-push:
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Build, tag, and push docker image to Amazon ECR
        working-directory: ./api
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: fake-ecommerce-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:latest
  
  update-ec2-app:
    runs-on: ubuntu-latest
    needs: ecr-push
    steps:
      - name: Adiciona chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Adiciona host à lista de conhecidos
        run: |
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_DNS }} >> ~/.ssh/known_hosts

      - name: Valida ssh no remoto na EC2 Ubuntu
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_DNS }} "echo 'SSH validado realizado com sucesso!'"

      - name: Docker update container
        env:
          REGISTRY: ${{ needs.ecr-push.outputs.registry }}
          REPOSITORY: fake-ecommerce-api
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_DNS }} "
            echo 'Iniciando atualização do container...' &&
            docker images &&
            docker pull $REGISTRY/$REPOSITORY:latest &&
            echo 'Container atualizado com sucesso!' &&
            docker images &&
            echo 'Parando e removendo container antigo...' &&
            docker stop fake-ecommerce-api &&
            sleep 2 &&
            echo 'Verificando containers existentes...' &&
            docker ps -a &&
            docker rm fake-ecommerce-api &&
            echo 'Iniciando novo container...' &&
            docker run -d --name fake-ecommerce-api -p 8000:8000 \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              $REGISTRY/$REPOSITORY:latest &&
            echo 'Novo container iniciado com sucesso!' &&
            docker ps -a
          "
